[{"title":"Android HOOK 技术之Frida的初级使用","date":"2017-04-01T11:39:15.000Z","path":"2017/04/01/Android-HOOK-技术之Frida的初级使用/","text":"Frida是一款基于Python + JavaScript 的Hook与调试框架，在Android\\Linux\\Windows等平台均能使用。这里我们以Windows来对Android应用程序进行Hook。Frida的官网地址是：https://www.frida.re。 Windows下Frida的安装 有多种安装方法，这里提供两种，第一种直接使用pip安装，第二种是下载egg文件安装 1.通过pip安装Frida1pip install frida 2.去下载对应平台的egg安装包进行安装下载地址：https://pypi.python.org/pypi/frida当前最新版本为9.1.23，下载对应平台和Python版本的安装包，例如我的系统为Win64，Python为2.7，下载的文件为frida-9.1.23-py2.7-win-amd64.egg。下载后安装即可。 由于网络原因，方法1安装时间太久，这里推荐第二种方法。 安装完成后在Dos窗口输入命令：1frida-ps 出现类似以下的界面表示安装成功。 Android下Frida环境的搭建 要求：一部Root过的手机或模拟器，最好采用4.4 ARM系统。PS：我真机采用的是魅族4的5.1系统，有些功能实现不了，只好用模拟器来完成。模拟器的具体配置如下图所示。 首先需用下载最新的frida-server，下载地址为：http://build.frida.re/frida-snapshot/android/arm/bin/frida-server。下载后将文件上传到手机中，并赋予执行权限。上传到手机使用如下命令：1adb push frida-server /data/local/tmp/ 将frida-server赋予执行权限，命令如下：1234adb shellsucd /data/local/tmp/chmod 777 frida-server 运行Frida-Server1./data/local/tmp/frida-server 执行frida-ps -U可以看到手机上的进程 使用frida-ps -R 也可以，但是需要进行转发。执行adb forward tcp:27042 tcp:27042后执行frida-ps -R也可以看到手机上的进程 至此，准备工作已经做好，现在来进行对Android上的程序进行Hook了。首先以WX的掷骰子和猜拳头为例。这里采用最新版的WX（6.5.7）。其代码如下所示：123456789101112131415161718192021222324252627282930313233# -*- coding: utf-8 -*import frida, sysdef on_message(message, data): if message['type'] == 'send': print(\"[*] &#123;0&#125;\".format(message['payload'])) else: print(message)jscode = \"\"\"Java.perform(function () &#123;var be= Java.use(\"com.tencent.mm.sdk.platformtools.bf\");send(\"start\")be.da.implementation = function()&#123; var type = arguments[0]; send(type);//5表示掷骰子，2表示猜拳头 if(type ==2)&#123; return 1;//表示是石头 &#125;else&#123; return 5;//骰子6点 &#125;&#125;;send(\"end\")&#125;);\"\"\"process = frida.get_usb_device().attach('com.tencent.mm')script = process.create_script(jscode)script.on('message', on_message)print('[*] weixin Start...')script.load()sys.stdin.read() 手机上打开微信后，运行代码。然后点击掷骰子，可以看到都是6点，猜拳头全部是石头。 下面来用一个例子来介绍一下，如何来通过Hook的方法修改原来的内容，以及当出现相同方法名时，如何对该方法进行Hook。其Android的Activity代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package com.test.fridatest;import android.app.Activity;import android.os.Bundle;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.Toast;public class MainActivity extends Activity &#123; private Button myButton1; private String TAG = \"fuping\"; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); myButton1 = (Button) findViewById(R.id.button1); myButton1.setOnClickListener( new ButtonClick()); &#125; class ButtonClick implements OnClickListener &#123; public void onClick(View v) &#123; switch (v.getId()) &#123; case R.id.button1: int nRet = test(4); String strRet = nRet + \"\"; Toast.makeText(MainActivity.this, strRet,Toast.LENGTH_LONG).show(); Log.i(TAG, \"test(int):\"+ strRet); strRet = test(4,2)+\"\"; Log.i(TAG, \"test(int,int):\"+ strRet); strRet = test(4,\"2\")+\"\"; Log.i(TAG, \"test(int,String):\"+ strRet); strRet = change(4,\"2\")+\"\"; Log.i(TAG, \"change(int,String):\"+ strRet); break; default: break; &#125; &#125; &#125; public int test(int num) &#123; int nRet = num*2; return nRet; &#125; public int test(int num,int b) &#123; int nRet = num*2 + b ; return nRet; &#125; public String test(int num,String b) &#123; String nRet = num*2 + b ; return nRet; &#125; public String change(int num,String b) &#123; String nRet = num*2 + b ; return nRet; &#125; &#125; 首先演示一下对change方法的hook。hook之前change方法输出的结果为82，预期Hook之后输出的结果应该为164。在真机上运行结果如下所示： 发现Hook之后返回的是null，而且报错。（经过多次给手机系统升级或降级，都无法成功，最后之后在模拟器上测试了） 在模拟器上进行Hook后，出现了预期的结果。在对test方法进行hook时，由于有多个test方法，所以在进行Hook时，需要指定是哪个方法。例如对String test(int num,String b)进行hook时，可以使用如下代码12345var TM = Java.use(\"com.test.fridatest.MainActivity\");TM.test.overload(\"int\",\"java.lang.String\").implementation = function (a,b) &#123; send(\"Called - test(int,String):\"+a+\"----\"+b); return this.test.overload(\"int\",\"java.lang.String\").call(this,8,\"3\");&#125;; 附上对test和change同时hook 的结果： 就个人而言，针对Frida和Xposed相比，Frida操作更简单，而且不需要重启手机。但相关资料较少，还是需要慢慢学习。 参考资料 https://www.frida.re/docs/examples/android/ https://www.codemetrix.net/hacking-android-apps-with-frida-1/ http://www.cnblogs.com/konf/p/5998785.html"},{"title":"Hello World","date":"2017-03-20T12:18:23.925Z","path":"2017/03/20/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new blog1$ hexo init Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Question运行hexo server，浏览器输入http://localhost:4000 无法访问 产生原因可能是端口占用。 Windows下运行命令netstat -ano | findstr 4000，看是否有有进程占用了4000端口。 这是安装了福昕PDF阅读器的原因，将Foxitprotect.exe进程结束即可。"}]